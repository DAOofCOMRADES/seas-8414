#!/usr/bin/env python3

from pytm.pytm import TM, Server, Datastore, Dataflow, Boundary, Actor, Lambda, ExternalEntity

# header
tm = TM("I3: How does it work?")
tm.description = "Application of Reinforcement Learning Methodology to Improve Robustness of Data Breach Controls"
tm.isOrdered = True

# boundaries
home = Boundary("Home")
internet = Boundary("Internet")
aws = Boundary("AWS")
company = Boundary("Company")

# Actors
teleworker = Actor("Teleworker Endpoint")
teleworker.inBoundary = home

# alexa = ExternalEntity("Amazon Alexa")
# alexa.inBoundary = internet

# umbrella = ExternalEntity("Cisco Umbrella")
# umbrella.inBoundary = internet

# majestic = ExternalEntity("Majestic")
# majestic.inBoundary = internet

# tranco = ExternalEntity("Tranco")
# tranco.inBoundary = internet

# anomali = ExternalEntity("Anomali")
# anomali.inBoundary = internet

# virustotal = ExternalEntity("Google VirusTotal")
# virustotal.inBoundary = internet

# web_traffic = ExternalEntity("Web Taffic Stats")
# web_traffic.inBoundary = internet

# ibm_resolver = ExternalEntity("IBM Quad9")
# ibm_resolver.inBoundary = internet

# dga = Server("DGA Model")
# dga.inBoundary = aws

proxy = Server("Network Proxy")
proxy.inBoundary = aws

# mitm = Server("MITM")
# mitm.inBoundary = aws

dns = Server("DNS")
dns.inBoundary = aws

h1_model = Server("RL Model #1")
h1_model.inBoundary = aws

insider = Server("ITP")
insider.inBoundary = aws

h2_model = Server("RL Model #2")
h2_model.inBoundary = aws

dlp = Server("DLP")
dlp.inBoundary = aws

h3_model = Server("RL Model #3")
h3_model.inBoundary = aws

google = ExternalEntity("google.com")
google.inBoundary = internet

# top_domain = Server("RL Loopback")
# top_domain.inBoundary = aws

CHOICE = "proxy"

# data flow
if CHOICE in ["dns", "H1"]:
	d1 = Dataflow(teleworker, proxy, "What is the www.google.com address?")
	d2 = Dataflow(dns, h1_model, "Is the www.google.com domain malicious?")

if CHOICE in ["proxy", "H1"]:
	Dataflow(teleworker, proxy, "Browse https://www.google.com")
	# Dataflow(proxy, mitm, "What is the domain name in HTTPS header?")
	Dataflow(proxy, dns, "What is the IP address of the domain?")
	# Dataflow(dns, h1_model, "Is the domain malicious or benign?")
	Dataflow(dns, h1_model, "send domain name to H1 model")
	Dataflow(h1_model, dns, "return benign or malicious")
	# Dataflow(h1_model, dns, "Respond whether the www.google.com domain is malicious or benign")
	Dataflow(dns, proxy, "Return blocking address if domain is malicious otherwise return real IP address")
	Dataflow(proxy, insider, "If domain is benign, check if the domain is allowed according to teleworker's insider risk factors ?")
	# Dataflow(insider, h2_model, "Is the teleworker malicious or benign?")
	# Dataflow(insider, h2_model, "send teleworker name to H2 model")
	# Dataflow(h2_model, insider, "return a list of allowed categories for a teleworker")
	Dataflow(insider, h2_model, "send teleworker and domain name")
	Dataflow(h2_model, insider, "return allowed domain categories")
	# Dataflow(insider, h2_model, "Is the teleworker malicious?")
	Dataflow(insider, proxy, "return if domain is allowed or denied")
	Dataflow(proxy, dlp, "If teleworker is benign, check what is the probability of data leak?")
	Dataflow(dlp, h3_model, "send network content to H3 model")
	Dataflow(h3_model, dlp, "return benign or malicious")

	Dataflow(dlp, proxy, "Return blocking address if data is exfiltrated otherwise return real IP address")
	Dataflow(proxy, google, "If data in transit is benign, get the contents of https://www.google.com")
	Dataflow(google, proxy, "Return the content of https://www.google.com?")
	Dataflow(proxy, teleworker, "Content of https://www.google.com")


if CHOICE in ["h1_model", "H1"]:
	Dataflow(h1_model, alexa, "How many users are browsing www.google.com in the last 24 hours?")
	Dataflow(h1_model, umbrella, "How many times is the www.google.com address resolved in the last 24 hours?")
	Dataflow(h1_model, majestic, "How many websites cite www.google.com in the last 24 hours?")
	Dataflow(h1_model, tranco, "How popular is www.google.com domain in the last 30 days?")
	Dataflow(h1_model, anomali, "How many suspicious activities reported about www.google.com?")
	Dataflow(h1_model, virustotal, "How many virus scanners reported suspicions about https://www.google.com?")
	Dataflow(h1_model, web_traffic, "How much web traffic reported on www.google.com for the last 90 days?")
	Dataflow(h1_model, ibm_resolver, "What is the IP address of www.google.com?")
	Dataflow(h1_model, dga, "What is the probability of www.google.com generated by humans or computers?")
	Dataflow(h1_model, top_domain, "What is the probability of top-level domain, google.com, being malicious?")

if CHOICE in ["dns", "H1"]:
	d13 = Dataflow(h1_model, dns, "Respond whether the www.google.com domain is malicious or benign")
	d14 = Dataflow(dns, teleworker, "Return blocking address if domain is malicious otherwise return real IP address")

# if CHOICE in ["proxy", "H1"]:
# 	p4 = Dataflow(h1_model, mitm, "Respond whether the www.google.com domain is malicious or benign")
# 	d5 = Dataflow(dns, teleworker, "Return blocking address if domain is malicious otherwise return real IP address")

	# p1 = Dataflow(teleworker, proxy, "Can I browse https://www.google.com address?")
	# p2 = Dataflow(proxy, mitm, "What is the actual URL inside encrypted connection?")
	# p3 = Dataflow(mitm, h1_model, "Is the www.google.com domain malicious?")
# render
tm.process()